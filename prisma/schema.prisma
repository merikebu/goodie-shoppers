// prisma/schema.prisma
// This is your comprehensive Prisma schema file for the "Goodie" application.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------------------------
// ENUMS: Reusable type definitions for specific fields.
// ----------------------------------------------------------------------
enum Role {
  USER
  ADMIN
}

// ----------------------------------------------------------------------
// NEXTAUTH MODELS: Core structure required for NextAuth.js authentication.
// ----------------------------------------------------------------------

// Linked social accounts (e.g., Google)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// User sessions (typically used when using database session strategy)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// The core User model with all application-specific fields
model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  password                 String?   // For manual email/password login
  emailVerified            DateTime?
  image                    String?   // Profile picture URL

  // User Roles: Defaults to USER on creation
  role                     Role      @default(USER)

  // Password Reset Fields
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?

  // Relations
  accounts                 Account[]
  sessions                 Session[]
  cartItems                CartItem[]
  wishlistItems            WishlistItem[]
  ratings                  Rating[]
  orders                   Order[]
}

// Tokens for email verification (e.g., magic links)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// ----------------------------------------------------------------------
// APPLICATION-SPECIFIC E-COMMERCE MODELS
// ----------------------------------------------------------------------

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Float
  imageUrl    String?
  publicId    String?  // For managing images on Cloudinary

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  ratings       Rating[]
  orderItems    OrderItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Ensures a product appears only once in a user's cart
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int      // e.g., a star rating from 1 to 5
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only rate a specific product once
}

model Order {
  id         String   @id @default(cuid())
  total      Float
  status     String   @default("PENDING") // e.g., PENDING, SHIPPED, DELIVERED, CANCELED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float    // The price of the product at the time the order was placed

  // Relations
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}