// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth.js Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  password                 String?
  emailVerified            DateTime?
  image                    String?
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  accounts                 Account[]
  sessions                 Session[]
  
  // --- NEW RELATIONS FOR E-COMMERCE FEATURES ---
  cartItems                CartItem[]
  wishlistItems            WishlistItem[]
  ratings                  Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- Application Models ---
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // --- NEW RELATIONS FOR E-COMMERCE FEATURES ---
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  ratings       Rating[]
}

// --- NEW E-COMMERCE MODELS ---

// Model for items in a user's shopping cart
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only have one entry per product in their cart
}

// Model for items in a user's wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only have one entry per product in their wishlist
}

// Model for product ratings
model Rating {
  id        String   @id @default(cuid())
  value     Int      // e.g., 1 to 5
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // A user can only rate a product once
}